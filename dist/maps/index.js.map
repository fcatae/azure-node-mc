{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAM,EAAE,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACzC,IAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC;AACpD,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAM,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC7C,OAAO,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE,CAAC;AAChC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,EAAC;AACjC,SAAO,CAAC,UAAU,CAAC,CAAC;CACrB;;AAED,MAAM,CAAC,OAAO,GAAG;AACf,gBAAc,EAAC,cAAc;AAC7B,UAAQ,EAAC,OAAO,CAAC,gBAAgB,CAAC;AAClC,SAAO,EAAC,OAAO,CAAC,eAAe,CAAC;AAChC,SAAO,EAAC,OAAO,CAAC,eAAe,CAAC;AAChC,aAAW,EAAC,OAAO,CAAC,mBAAmB,CAAC;AACxC,YAAU,EAAC,OAAO,CAAC,kBAAkB,CAAC;AACtC,WAAS,EAAC,OAAO,CAAC,kBAAkB,CAAC;AACrC,iBAAe,EAAC,OAAO,CAAC,uBAAuB,CAAC;CACjD,CAAC;;AAEF,SAAS,cAAc,CAAC,OAAO,EAAE;AAC/B,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;AAChC,UAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AAC1B,SAAO,QAAQ,CAAC;CACjB;;IAEK,QAAQ;YAAR,QAAQ;;AACD,WADP,QAAQ,GACE;0BADV,QAAQ;;AAEV,+BAFE,QAAQ,6CAEF;AACR,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC;GACrB;;eAJG,QAAQ;;WAML,iBAAC,OAAO,EAAE;;;AACf,UAAM,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;AACrE,UAAI,CAAC,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AACxC,mBAAY,OAAO,CAAC,CACjB,MAAM,CAAC,UAAA,UAAU;eAAI,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,IAAE,SAAS;OAAA,CAAC,CAC3D,OAAO,CAAC,UAAA,UAAU;eAAI,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,QAAO,OAAO,CAAC;OAAA,CAAC,CAAC;AACpE,UAAG,OAAO,CAAC,OAAO,IAAI,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;AAC7C,UAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,UAAA,KAAK;eAAI,MAAK,IAAI,CAAC,OAAO,EAAC,KAAK,CAAC;OAAA,CAAC,CAAC;AAC5D,UAAI,CAAC,OAAO,CAAC,EAAE,CAAC,WAAW,EAAE;eAAM,MAAK,IAAI,CAAC,WAAW,EAAC,MAAK,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;OAAA,CAAC,CAAC;AACpG,UAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;;;KAInB;;;SAnBG,QAAQ;GAAS,YAAY","file":"index.js","sourcesContent":["const mc = require('minecraft-protocol');\nconst EventEmitter = require('events').EventEmitter;\nconst path = require('path');\nconst requireIndex = require('requireindex');\nrequire('emit-then').register();\nif (process.env.NODE_ENV === 'dev'){\n  require('longjohn');\n}\n\nmodule.exports = {\n  createMCServer:createMCServer,\n  Behavior:require(\"./lib/behavior\"),\n  Command:require(\"./lib/command\"),\n  version:require(\"./lib/version\"),\n  generations:require(\"./lib/generations\"),\n  experience:require(\"./lib/experience\"),\n  UserError:require(\"./lib/user_error\"),\n  portal_detector:require('./lib/portal_detector')\n};\n\nfunction createMCServer(options) {\n  options = options || {};\n  const mcServer = new MCServer();\n  mcServer.connect(options);\n  return mcServer;\n}\n\nclass MCServer extends EventEmitter {\n  constructor() {\n    super();\n    this._server = null;\n  }\n\n  connect(options) {\n    const plugins = requireIndex(path.join(__dirname, 'lib', 'plugins'));\n    this._server = mc.createServer(options);\n    Object.keys(plugins)\n      .filter(pluginName => plugins[pluginName].server!=undefined)\n      .forEach(pluginName => plugins[pluginName].server(this, options));\n    if(options.logging == true) this.createLog();\n    this._server.on('error', error => this.emit('error',error));\n    this._server.on('listening', () => this.emit('listening',this._server.socketServer.address().port));\n    this.emit('asap');\n\n    //process.on('unhandledRejection', err => this.emit('error',err));\n    // TODO better catch all promises: using this make it impossible to run 2 servers in one process\n  }\n}"],"sourceRoot":"/source/"}