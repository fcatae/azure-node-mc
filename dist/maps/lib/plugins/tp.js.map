{"version":3,"sources":["lib/plugins/tp.js"],"names":[],"mappings":";;AAAA,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;AAClC,IAAM,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC;;AAEpD,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,UAAC,MAAM,EAAE,IAAI,EAAK;;AAExC,QAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;AAClB,QAAI,EAAE,UAAU;AAChB,WAAO,EAAE,CAAC,IAAI,CAAC;AACf,QAAI,EAAE,sBAAsB;AAC5B,SAAK,EAAE,6DAA6D;AACpE,MAAE,EAAE,IAAI;AACR,SAAK,EAAA,eAAC,GAAG,EAAE;AACT,aAAO,GAAG,CAAC,KAAK,CAAC,6CAA6C,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KAC1F;AACD,UAAM,EAAA,gBAAC,IAAI,EAAE;AACX,UAAG,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;;AACpB,cAAI,aAAa,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,cAAI,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,cAAG,SAAS,CAAC,MAAM,IAAE,CAAC,EAAE,MAAM,IAAI,SAAS,CAAC,gBAAgB,CAAC,CAAC;AAC9D,mBAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;;AAEzB,uBAAa,CAAC,OAAO,CAAC,UAAA,CAAC;mBAAI,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAC,EAAE,CAAC,CAAC;WAAA,CAAC,CAAC;;OACzE,MAAM,IAAG,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AAC3B,YAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5D,YAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5D,YAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;;AAE5D,cAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;OAEpC,MAAM,IAAG,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AAC3B,YAAI,aAAa,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEnD,qBAAa,CAAC,OAAO,CAAC,UAAA,CAAC;iBAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,CAC5C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,EAC9C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,EAC9C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,CAC/C,CAAC;SAAA,CAAC,CAAC;OACL;KACF;GACF,CAAC,CAAC;CACJ,CAAC","file":"lib/plugins/tp.js","sourcesContent":["const Vec3 = require(\"vec3\").Vec3;\nconst UserError = require('flying-squid').UserError;\n\nmodule.exports.player = (player, serv) => {\n\n  player.commands.add({\n    base: 'teleport',\n    aliases: ['tp'],\n    info: 'to teleport a player',\n    usage: '/teleport [target player] <destination player or x> [y] [z]',\n    op: true,\n    parse(str) {\n      return str.match(/^(((.* )?~?-?\\d* ~?-?\\d* ~?-?\\d*)|(.+ .+))$/) ? str.split(' ') : false;\n    },\n    action(args) {\n      if(args.length === 2) {\n        let entities_from = player.selectorString(args[0]);\n        let entity_to = player.selectorString(args[1]);\n        if(entity_to.length==0) throw new UserError('Invalid target');\n        entity_to = entity_to[0];\n\n        entities_from.forEach(e => e.teleport(entity_to.position.scaled(1/32)));\n      } else if(args.length === 3) {\n        let x = serv.posFromString(args[0], player.position.x / 32);\n        let y = serv.posFromString(args[1], player.position.y / 32);\n        let z = serv.posFromString(args[2], player.position.z / 32);\n        \n        player.teleport(new Vec3(x, y, z));\n\n      } else if(args.length === 4) {\n        let entities_from = player.selectorString(args[0]);\n\n        entities_from.forEach(e => e.teleport(new Vec3(\n          serv.posFromString(args[1], e.position.x / 32),\n          serv.posFromString(args[2], e.position.y / 32),\n          serv.posFromString(args[3], e.position.z / 32)\n        )));\n      }\n    }\n  });\n};\n"],"sourceRoot":"/source/"}