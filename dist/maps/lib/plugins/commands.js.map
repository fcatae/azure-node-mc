{"version":3,"sources":["lib/plugins/commands.js"],"names":[],"mappings":"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","file":"lib/plugins/commands.js","sourcesContent":["const UserError = require('flying-squid').UserError;\n\nmodule.exports.player=function(player, serv) {\n\n  player.commands.add({\n    base: 'help',\n    info: 'to show all commands',\n    usage: '/help [command]',\n    parse(str) {\n      const params = str.split(' ');\n      const page = parseInt(params[params.length-1]);\n      if (page) {\n        params.pop();\n      }\n      const search = params.join(' ');\n      return { search: search, page: (page && page - 1) || 0 };\n    },\n    action({search, page}) {\n      if (page < 0) return 'Page # must be >= 1';\n      const hash = player.commands.uniqueHash;\n\n      const PAGE_LENGTH = 7;\n\n      let found = Object.keys(hash).filter(h => (h + ' ').indexOf((search && search + ' ') || '') == 0);\n\n      if (found.length == 0) { // None found\n        return 'Could not find any matches';\n      } else if (found.length == 1) { // Single command found, giev info on command\n        const cmd = hash[found[0]];\n        const usage = (cmd.params && cmd.params.usage) || cmd.base;\n        const info = (cmd.params && cmd.params.info) || 'No info';\n        player.chat(usage + ': ' + info);\n      } else { // Multiple commands found, give list with pages\n        const totalPages = Math.ceil((found.length-1) / PAGE_LENGTH);\n        if (page >= totalPages) return 'There are only' + totalPages + ' help pages';\n        found = found.sort();\n        if (found.indexOf('search') != -1) {\n          const baseCmd = hash[search];\n          player.chat(baseCmd.base + ' -' + ((baseCmd.params && baseCmd.params.info && ' ' + baseCmd.params.info) || '=-=-=-=-=-=-=-=-'));\n        } else {\n          player.chat('Help -=-=-=-=-=-=-=-=-');\n        }\n        for (let i = PAGE_LENGTH*page; i < Math.min(PAGE_LENGTH*(page + 1), found.length); i++) {\n          if (found[i] === search) continue;\n          const cmd = hash[found[i]];\n          const usage = (cmd.params && cmd.params.usage) || cmd.base;\n          const info = (cmd.params && cmd.params.info) || 'No info';\n          player.chat(usage + ': ' + info);\n        }\n        player.chat('--=[Page ' + (page + 1) + ' of ' + totalPages + ']=--')\n      }\n    }\n  });\n\n  player.commands.add({\n    base: 'ping',\n    info: 'to pong!',\n    usage: '/ping [number]',\n    action(params) {\n      const num = params[0] * 1 + 1;\n\n      let str = 'pong';\n      if(!isNaN(num)) str += ' [' + num + ']';\n\n      player.chat(str + '!');\n    }\n  });\n\n  player.commands.add({\n    base: 'modpe',\n    info: 'for modpe commands',\n    usage: '/modpe <params>',\n    parse(str) { return str ? str : false },\n    action(str) {\n      player.emit(\"modpe\", str);\n    }\n  });\n\n  player.commands.add({\n    base: 'version',\n    info: 'to get version of the server',\n    usage: '/version',\n    action() {\n      return 'This server is running flying-squid version 0.1.0';\n    }\n  });\n\n  player.commands.add({\n    base: 'bug',\n    info: 'to bug report',\n    usage: '/bug',\n    action() {\n      return 'Report bugs / issues here: https://github.com/PrismarineJS/flying-squid/issues';\n    }\n  });\n\n  player.commands.add({\n    base: 'selector',\n    info: 'Get array from selector',\n    usage: '/selector <selector>',\n    op: true,\n    parse(str) {\n      return str || false;\n    },\n    action(sel) {\n      const arr = serv.selectorString(sel, player.position.scaled(1/32), player.world);\n      player.chat(JSON.stringify(arr.map(a => a.id)));\n    }\n  });\n\n\n  player.handleCommand = async (str) => {\n    try {\n      const res = await player.commands.use(str, player.op);\n      if (res) player.chat(serv.color.red + res);\n    }\n    catch(err) {\n      if (err instanceof UserError) player.chat(serv.color.red + 'Error: ' + err.message);\n      else setTimeout(() => {throw err;}, 0);\n    }\n  }\n};\n\nmodule.exports.entity = function(entity, serv) {\n  entity.selectorString = (str) => serv.selectorString(str, entity.position.scaled(1/32), entity.world);\n};\n\nmodule.exports.server = function(serv) {\n\n  function shuffleArray(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex ;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  const notudf = i => typeof i != 'undefined';\n\n  serv.selector = (type, opt) => {\n    if (['all', 'random', 'near', 'entity'].indexOf(type) == -1)\n      throw new UserError('serv.selector(): type must be either [all, random, near, or entity]');\n\n    const count = typeof opt.count != 'undefined' ?\n                  count :\n                  (type == 'all' || type == 'entity' ?serv.entities.length : 1);\n    const pos = opt.pos;\n    let sample;\n    if (type == 'all') sample = serv.players;\n    else if (type == 'random' || type == 'near') sample = serv.players.filter(p => p.health != 0);\n    else if (type == 'entity') sample = Object.keys(serv.entities).map(k => serv.entities[k]);\n\n    const checkOption = (val, compare) => {\n      if (!val) return true;\n      const not = val[0] == '!';\n      let v = val;\n      if (not) v = v.slice(1, v.length);\n      if (not && compare == v) return false;\n      if (!not && compare != v) return false;\n      return true;\n    };\n\n    const scores = {\n      max: [],\n      min: []\n    };\n\n    Object.keys(opt).forEach(o => {\n      if (o.indexOf('score_') != 0) return;\n      const score = o.replace('score_', '');\n      if (score.indexOf('_min') == score.length - 1) {\n        scores.min.push({\n          score: score.replace('_min' ,''),\n          val: opt[o]\n        });\n      } else {\n        scores.max.push({\n          score: score,\n          val: opt[o]\n        });\n      }\n    });\n\n    sample = sample.filter(s => {\n      if ((notudf(opt.radius) && s.position.scaled(1/32).distanceTo(pos) > opt.radius) ||\n          (notudf(opt.minRadius) && s.position.scaled(1/32).distanceTo(pos) < opt.minRadius) ||\n          (notudf(opt.gameMode) && s.gameMode != opt.gameMode) ||\n          (notudf(opt.level) && s.level > opt.level) ||\n          (notudf(opt.minLevel) && s.level < opt.minLevel) ||\n          (notudf(opt.yaw) && s.yaw > opt.yaw) ||\n          (notudf(opt.minYaw) && s.yaw < opt.minYaw) ||\n          (notudf(opt.pitch) && s.pitch > opt.pitch) ||\n          (notudf(opt.minPitch) && s.pitch < opt.minPitch))\n            return false;\n\n      if (!checkOption(opt.team, s.team)) return false;\n      if (!checkOption(opt.name, s.username)) return false;\n      if (!checkOption(opt.type, s.name)) return false;\n\n      let fail = false;\n      scores.max.forEach(m => {\n        if (fail) return;\n        if (!notudf(s.scores[m.score])) fail = true;\n        else if (s.scores[m] > m.val) fail = true;\n      });\n      if (fail) return false;\n      scores.min.forEach(m => {\n        if (fail) return;\n        if (!notudf(s.scores[m.score])) fail = true;\n        else if (s.scores[m] < m.val) fail = true;\n      });\n      return !fail;\n\n\n    });\n\n    if (type == 'near') sample.sort((a,b) => a.position.distanceTo(opt.pos) > b.position.distanceTo(opt.pos));\n    else if (type == 'random') sample = shuffleArray(sample);\n    else sample = sample.reverse(); // Front = newest\n\n    if (count > 0) return sample.slice(0, count);\n    else return sample.slice(count); // Negative, returns from end\n  };\n\n  serv.selectorString = (str, pos, world, allowUser=true) => {\n    pos = pos.clone();\n    const player = serv.getPlayer(str);\n    if (!player && str[0] != '@') return [];\n    else if (player) return allowUser ? [player] : [];\n    const match = str.match(/^@([arpe])(?:\\[([^\\]]+)\\])?$/);\n    if (match == null) throw new UserError('Invalid selector format');\n    const typeConversion = {\n      a: 'all',\n      r: 'random',\n      p: 'near',\n      e: 'entity'\n    };\n    const type = typeConversion[match[1]];\n    const opt = match[2] ? match[2].split(',') : [];\n    const optPair = [];\n    let err;\n    opt.forEach(o => {\n      const match = o.match(/^([^=]+)=([^=]+)$/);\n      if (match == null) err = new UserError('Invalid selector option format: \"' + o + '\"');\n      else optPair.push({key: match[1], val: match[2]});\n    });\n    if (err) throw err;\n\n    const optConversion = {\n      type: 'type',\n      r: 'radius',\n      rm: 'minRadius',\n      m: 'gameMode',\n      c: 'count',\n      l: 'level',\n      lm: 'minLevel',\n      team: 'team',\n      name: 'name',\n      rx: 'yaw',\n      rxm: 'minYaw',\n      ry: 'pitch',\n      rym: 'minPitch'\n    };\n    const convertInt = ['r', 'rm', 'm', 'c', 'l', 'lm', 'rx', 'rxm', 'ry', 'rym'];\n\n    const data = {\n      pos: pos,\n      world: world,\n      scores: [],\n      minScores: []\n    };\n\n    optPair.forEach(({key,val}) => {\n      if (['x', 'y', 'z'].indexOf(key) != -1) pos[key] = val;\n      else if (!optConversion[key]) {\n        data[key] = val;\n      }\n      else {\n        if (convertInt.indexOf(key) != -1) val = parseInt(val);\n        data[optConversion[key]] = val;\n      }\n    });\n\n    return serv.selector(type, data);\n  };\n\n  serv.posFromString = (str, pos) => {\n    if (str.indexOf(\"~\")==-1) return parseFloat(str);\n    if (str.match(/~-?\\d+/)) return parseFloat(str.slice(1)) + pos;\n    else if (str == '~') return pos;\n    else throw new UserError('Invalid position');\n  };\n};"],"sourceRoot":"/source/"}