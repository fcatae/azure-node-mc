{"version":3,"sources":["lib/worldGenerations/superflat.js"],"names":[],"mappings":";;AAAA,IAAM,KAAK,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;AACjE,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;;AAElC,SAAS,UAAU,GAAqF;mEAAJ,EAAE;;sBAAjF,GAAG;MAAH,GAAG,4BAAC,SAAS;4BAAC,SAAS;MAAT,SAAS,kCAAC,CAAC;4BAAC,SAAS;MAAT,SAAS,kCAAC,CAAC;yBAAC,MAAM;MAAN,MAAM,+BAAC,CAAC;mCAAC,gBAAgB;MAAhB,gBAAgB,yCAAC,CAAC;wBAAC,KAAK;MAAL,KAAK,8BAAC,KAAK;;AAChG,WAAS,aAAa,GAAG;AACvB,QAAM,KAAK,GAAC,IAAI,KAAK,EAAE,CAAC;AACxB,QAAM,MAAM,GAAG,gBAAgB,GAAG,CAAC,CAAC;AACpC,QAAM,YAAY,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;AAC1H,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;AAC3B,WAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;AAC3B,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAC7C,cAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,KACxD,IAAI,CAAC,GAAG,gBAAgB,GAAG,CAAC,EAAE,KAAK,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,KAC/E,KAAK,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;SACpD;AACD,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC5B,eAAK,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SAC1C;OACF;KACF;;AAED,QAAI,KAAK,EACL,YAAY,CAAC,OAAO,CAAC,UAAA,CAAC;aAAI,KAAK,CAAC,YAAY,CAAC,CAAC,EAAE,EAAE,CAAC;KAAA,CAAC,CAAC;AACzD,WAAO,KAAK,CAAC;GACd;AACD,SAAO,aAAa,CAAC;CACtB;;AAED,MAAM,CAAC,OAAO,GAAC,UAAU,CAAC","file":"lib/worldGenerations/superflat.js","sourcesContent":["const Chunk = require('prismarine-chunk')(require(\"../version\"));\nconst Vec3 = require('vec3').Vec3;\n\nfunction generation({opt='default',bottom_id=7,middle_id=1,top_id=2,middle_thickness=3,debug=false}={}) {\n  function generateChunk() {\n    const chunk=new Chunk();\n    const height = middle_thickness + 1;\n    const DEBUG_POINTS = [new Vec3(0, height, 0), new Vec3(15, height, 0), new Vec3(0, height, 15), new Vec3(15, height, 15)];\n    for (let x = 0; x < 16; x++) {\n      for (let z = 0; z < 16; z++) {\n        for (let y = 0; y < middle_thickness + 2; y++) {\n          if (y == 0) chunk.setBlockType(new Vec3(x, y, z), bottom_id);\n          else if (y < middle_thickness + 1) chunk.setBlockType(new Vec3(x, y, z), middle_id);\n          else chunk.setBlockType(new Vec3(x, y, z), top_id);\n        }\n        for (let y = 0; y < 256; y++) {\n          chunk.setSkyLight(new Vec3(x, y, z), 15);\n        }\n      }\n    }\n\n    if (debug)\n        DEBUG_POINTS.forEach(p => chunk.setBlockType(p, 35));\n    return chunk;\n  }\n  return generateChunk;\n}\n\nmodule.exports=generation;"],"sourceRoot":"/source/"}