{"version":3,"sources":["lib/worldGenerations/diamond_square.js"],"names":[],"mappings":"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","file":"lib/worldGenerations/diamond_square.js","sourcesContent":["const Chunk = require('prismarine-chunk')(require(\"../version\"));\nconst Vec3 = require('vec3').Vec3;\nconst rand = require('random-seed');\n\nclass DiamondSquare {\n  constructor(size, roughness, seed) {\n    // public fields\n    this.size = size;\n    this.roughness = roughness;\n    this.seed = seed;\n    this.opCountN = 0;\n\n    // private field\n    this.data = [];\n  }\n\n  // public methods\n  value(x, y, v) {\n    x = parseInt(x);\n    y = parseInt(y);\n    if (typeof(v) != 'undefined')\n      this.val(x, y, v);\n    else\n      return this.val(x, y);\n  };\n\n  // private methods\n  val(x, y, v) {\n    if (typeof(v) != 'undefined')\n      this.data[x + '_' + y] = Math.max(0.0, Math.min(1.0, v));\n    else {\n      if (x <= 0 || x >= this.size || y <= 0 || y >= this.size) return 0.0;\n\n      if (this.data[x + '_' + y] == null) {\n        this.opCountN++;\n        let base = 1;\n        while (((x & base) == 0) && ((y & base) == 0))\n          base <<= 1;\n\n        if (((x & base) != 0) && ((y & base) != 0))\n          this.squareStep(x, y, base);\n        else\n          this.diamondStep(x, y, base);\n      }\n      return this.data[x + '_' + y];\n    }\n  }\n\n  randFromPair(x, y) {\n    let xm7,xm13,xm1301081,ym8461,ym105467,ym105943;\n    for (let i = 0; i < 80; i++) {\n      xm7 = x % 7;\n      xm13 = x % 13;\n      xm1301081 = x % 1301081;\n      ym8461 = y % 8461;\n      ym105467 = y % 105467;\n      ym105943 = y % 105943;\n      //y = (i < 40 ? seed : x);\n      y = x + this.seed;\n      x += (xm7 + xm13 + xm1301081 + ym8461 + ym105467 + ym105943);\n    }\n\n    return (xm7 + xm13 + xm1301081 + ym8461 + ym105467 + ym105943) / 1520972.0;\n  }\n\n  displace(v, blockSize, x, y) {\n    return (v + (this.randFromPair(x, y, this.seed) - 0.5) * blockSize * 2 / this.size * this.roughness);\n  }\n\n  squareStep(x, y, blockSize) {\n    if (this.data[x + '_' + y] == null) {\n      this.val(x, y,\n        this.displace((this.val(x - blockSize, y - blockSize) +\n          this.val(x + blockSize, y - blockSize) +\n          this.val(x - blockSize, y + blockSize) +\n          this.val(x + blockSize, y + blockSize)) / 4, blockSize, x, y));\n    }\n  }\n\n  diamondStep(x, y, blockSize) {\n    if (this.data[x + '_' + y] == null) {\n      this.val(x, y,\n        this.displace((this.val(x - blockSize, y) +\n          this.val(x + blockSize, y) +\n          this.val(x, y - blockSize) +\n          this.val(x, y + blockSize)) / 4, blockSize, x, y));\n    }\n  }\n}\n\nfunction generation({seed,worldHeight=80,waterline=20}={}) {\n  // Selected empirically\n  const size = 10000000;\n  const space = new DiamondSquare(size, size / 500, seed);\n\n  function generateSimpleChunk(chunkX, chunkZ) {\n    const chunk = new Chunk();\n    const seedRand = rand.create(seed+':'+chunkX+':'+chunkZ);\n\n    const worldX = chunkX * 16 + size / 2;\n    const worldZ = chunkZ * 16 + size / 2;\n\n    for (let x = 0; x < 16; x++) {\n      for (let z = 0; z < 16; z++) {\n        const level = Math.floor(space.value(worldX + x, worldZ + z) * worldHeight);\n        const dirtheight = level - 4 + seedRand(3);\n        const bedrockheight = 1 + seedRand(4);\n        for (let y = 0; y < 256; y++) {\n          let block;\n          let data;\n\n          const surfaceblock = level < waterline ? 12 : 2; // Sand below water, grass\n          const belowblock = level < waterline ? 12 : 3; // 3-5 blocks below surface\n\n          if (y < bedrockheight) block = 7; // Solid bedrock at bottom\n          else if (y < level && y >= dirtheight) block = belowblock; // Dirt/sand below surface\n          else if (y < level) block = 1; // Set stone inbetween\n          else if (y == level) block = surfaceblock; // Set surface sand/grass\n          else if (y <= waterline) block = 9; // Set the water\n          else if (y == level+1 && level >= waterline && seedRand(10) ==0) { // 1/10 chance of grass\n            block = 31;\n            data = 1;\n          }\n\n          const pos = new Vec3(x, y, z);\n          if (block) chunk.setBlockType(pos, block);\n          if (data) chunk.setBlockData(pos, data);\n          chunk.setSkyLight(pos, 15);\n        }\n      }\n    }\n\n    return chunk;\n  }\n  return generateSimpleChunk;\n}\n\nmodule.exports=generation;\n"],"sourceRoot":"/source/"}